// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    name          String?
    email         String    @unique
    emailVerified DateTime?
    role          UserRole? @relation(fields: [userRoleId], references: [id])
    image         String?
    accounts      Account[]
    sessions      Session[]
    rsvp          Rsvp[]
    userRoleId    String?
}

model UserRole {
    id   String @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    name String @unique
    User User[]
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BlogPost {
    id        String   @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    title     String
    content   String
    date      DateTime
    published Boolean
}

model Configuration {
    id          String  @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    key         String  @unique
    value       String
    description String?
}

model Rsvp {
    id             String   @id @default(cuid()) @map("_id") // This is necessary for MongoDB
    name           String
    email          String
    userId         String
    requested_date DateTime
    approved       Boolean
    rejected       Boolean
    guests         Int
    message        String?
    User           User     @relation(fields: [userId], references: [id])
}
